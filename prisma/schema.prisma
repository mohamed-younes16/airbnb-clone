generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String        @id @unique @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  username      String?
  imageUrl      String?
  reservations  Reservation[] @relation("reservation_owner")
  listing       Listing[]     @relation("listing_owner")
  favourites    Listing[]     @relation("favourited_user")
  bio           String?
  onboarded     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  hashedpassword String?
  accounts       Account[]
  sessions       Session[]

  @@unique([name])
  @@index([id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Listing {
  id            String        @id @unique @default(cuid())
  ownerId       String
  owner         User          @relation("listing_owner", fields: [ownerId], onDelete: Cascade, references: [id])
  title         String
  images        String[]
  description   String
  roomCount     Int
  guestCount    Int
  bathroomCount Int
  reservations  Reservation[] @relation("reservation_listing")
  price         Int
  category      String
  favouritedBy  User[]        @relation("favourited_user")
  locationValue String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([id])
}

model Reservation {
  id         String   @id @unique @default(cuid())
  ownerId    String
  owner      User     @relation("reservation_owner", fields: [ownerId], onDelete: Cascade, references: [id])
  listingId  String
  listing    Listing  @relation("reservation_listing", fields: [listingId], onDelete: Cascade, references: [id])
  totalPrice Int
  totalDays  Int
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  review     Review?  @relation("reservation_Review")

  @@index([id])
}

model Review {
  id            String      @id @unique @default(cuid())
  reservationId String      @unique
  reservation   Reservation @relation("reservation_Review", fields: [reservationId], references: [id], onDelete: Cascade)
  message       String      @default("")
  stars         Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([id])
}
